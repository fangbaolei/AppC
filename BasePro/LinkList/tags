!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ChnInfo	ListTest.h	/^typedef struct ChnInfo{$/;"	s
ChnInfo	ListTest.h	/^}ChnInfo;$/;"	t	typeref:struct:ChnInfo
HPT_INLINE	list.h	38;"	d
HPT_UPTR	list.h	/^typedef unsigned long HPT_UPTR;$/;"	t
INIT_LIST_HEAD	list.h	49;"	d
LIST_HEAD_INIT	list.h	47;"	d
ListAddNode	ListTest.c	/^int ListAddNode(ChnInfo ChnHead)$/;"	f
_HPT_LIST_H_	list.h	33;"	d
__LIST_TEST__H__	ListTest.h	2;"	d
__MY_LIST_H__	mylist.h	2;"	d
__list_add	list.h	/^static HPT_INLINE void __list_add(struct list_head * _new, struct list_head * prev, struct list_head * next)$/;"	f
__list_del	list.h	/^static HPT_INLINE void __list_del(struct list_head * prev, struct list_head * next)$/;"	f
__list_splice	list.h	/^static HPT_INLINE void __list_splice(struct list_head *list,$/;"	f
get_first_item	list.h	144;"	d
kernel_list_entry	mylist.h	29;"	d
kernel_list_head	mylist.h	/^struct kernel_list_head {$/;"	s
list_add_tail	list.h	/^static HPT_INLINE void list_add_tail(struct list_head *_new, struct list_head *head)$/;"	f
list_add	list.h	/^static HPT_INLINE void list_add(struct list_head *_new, struct list_head *head)$/;"	f
list_del_init	list.h	/^static HPT_INLINE void list_del_init(struct list_head *entry)$/;"	f
list_del	list.h	/^static HPT_INLINE void list_del(struct list_head *entry)$/;"	f
list_empty	list.h	/^static HPT_INLINE int list_empty(struct list_head *head)$/;"	f
list_entry	list.h	134;"	d
list_for_each_entry_safe	mylist.h	78;"	d
list_for_each_entry	mylist.h	66;"	d
list_for_each_prev	mylist.h	45;"	d
list_for_each_safe	list.h	140;"	d
list_for_each_safe	mylist.h	55;"	d
list_for_each	list.h	137;"	d
list_for_each	mylist.h	37;"	d
list_head	list.h	/^struct list_head {$/;"	s
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_move	list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_splice_init	list.h	/^static HPT_INLINE void list_splice_init(struct list_head *list, struct list_head *head)$/;"	f
list_splice	list.h	/^static HPT_INLINE void list_splice(struct list_head *list, struct list_head *head)$/;"	f
list	ListTest.h	/^    struct list_head list;$/;"	m	struct:ChnInfo	typeref:struct:ChnInfo::list_head
main	ListTest.c	/^int main(void)$/;"	f
name	ListTest.h	/^    char *name;    $/;"	m	struct:ChnInfo
next	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
next	mylist.h	/^	struct kernel_list_head *next, *prev;$/;"	m	struct:kernel_list_head	typeref:struct:kernel_list_head::kernel_list_head
prev	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
prev	mylist.h	/^	struct kernel_list_head *next, *prev;$/;"	m	struct:kernel_list_head	typeref:struct:kernel_list_head::
